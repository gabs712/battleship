{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://project/./src/js/computer.js","webpack://project/./src/js/cell.js","webpack://project/./src/js/grid.js","webpack://project/./src/js/gameboard.js","webpack://project/./src/js/player.js","webpack://project/./src/js/ship.js","webpack://project/./src/js/randomize.js","webpack://project/./src/js/main.js"],"sourcesContent":["const attacked = []\n\nconst Computer = (player) => {\n  const slots = player.gameboard.slots\n  const grid = document.querySelector(`[data-grid2]`)\n\n  const wasAttacked = (row, column) => {\n    for (const combination of attacked) {\n      if (combination[0] === row && combination[1] === column) {\n        return true\n      }\n    }\n    return false\n  }\n\n  const getRecentShip = () => {\n    for (const combination of [...attacked].reverse()) {\n      const slot = slots[combination[0]][combination[1]]\n      if (slot.type === 'ship') {\n        return combination\n      }\n    }\n    return null\n  }\n\n  function isSlotCoordinate(slot, row, column) {\n    if (row < 0 || row > 9 || column < 0 || column > 9) {\n      return false\n    }\n    return slots[row][column] === slot\n  }\n\n  const isShipAdjascent = (shipSlot, row, column) => {\n    if (row < 0 || row > 9 || column < 0 || column > 9) {\n      return false\n    }\n\n    if (isSlotCoordinate(shipSlot, row, column)) return true // Current\n    if (isSlotCoordinate(shipSlot, row - 1, column)) return true // Top\n    if (isSlotCoordinate(shipSlot, row + 1, column)) return true // Bottom\n    if (isSlotCoordinate(shipSlot, row, column - 1)) return true // Left\n    if (isSlotCoordinate(shipSlot, row, column + 1)) return true // Right\n\n    return false\n  }\n\n  const isValidCombination = (row, column) => {\n    if (wasAttacked(row, column)) {\n      return false\n    }\n\n    const recentShip = getRecentShip()\n    if (recentShip !== null) {\n      const recentShipSlot = slots[recentShip[0]][recentShip[1]]\n      if (\n        !recentShipSlot.isSunk() &&\n        !isShipAdjascent(recentShipSlot, row, column)\n      ) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  const attack = () => {\n    let row\n    let column\n\n    do {\n      row = Math.floor(Math.random() * 10)\n      column = Math.floor(Math.random() * 10)\n    } while (!isValidCombination(row, column))\n\n    attacked.push([row, column])\n\n    const el = grid.querySelector(`[row=\"${row}\"][column=\"${column}\"]`)\n    el.obj.receiveAttack()\n  }\n  return { attack }\n}\n\nexport default Computer\n","import Computer from './computer'\n\nconst GenericCell = (player, column, row) => {\n  const el = newElement()\n\n  function newElement() {\n    const el = document.createElement('div')\n    el.className = `\n       outline-slate-500 outline-2 outline bg-gray-100\n    `\n    el.setAttribute('row', row)\n    el.setAttribute('column', column)\n\n    return el\n  }\n\n  const addInteractivity = (cb) => {\n    addInteractiveEffects(true)\n    addAttackEvent(cb)\n  }\n\n  const addInteractiveEffects = (boolean) => {\n    const effects = [\n      'cursor-pointer',\n      'hover:bg-gray-200',\n      'active:bg-gray-300',\n    ]\n\n    if (boolean) {\n      el.classList.add(...effects)\n    } else {\n      el.classList.remove(...effects)\n    }\n  }\n\n  function addAttackEvent(cb) {\n    el.addEventListener(\n      'click',\n      () => {\n        cb()\n        addInteractiveEffects(false)\n\n        if (!player.gameboard.isAllSunk()) {\n          Computer(player.enemy).attack()\n        }\n      },\n      { once: true },\n    )\n  }\n\n  const get = () => {\n    return el\n  }\n\n  return {\n    column,\n    row,\n    get,\n    addInteractivity,\n  }\n}\n\nconst EmptyCell = (player, column, row) => {\n  const cell = GenericCell(player, column, row)\n  const el = cell.get()\n\n  if (player.isComputer) {\n    cell.addInteractivity(receiveAttack)\n  }\n\n  function receiveAttack() {\n    player.gameboard.receiveAttack(row, column)\n    el.classList.replace('bg-gray-100', 'bg-blue-200')\n  }\n  return { ...cell, receiveAttack }\n}\n\nconst ShipCell = (player, column, row) => {\n  const cell = GenericCell(player, column, row)\n  const el = cell.get()\n\n  if (player.isComputer) {\n    cell.addInteractivity(receiveAttack)\n  }\n\n  const endGame = () => {\n    document.body.innerHTML = ''\n\n    const msg = document.createElement('div')\n    document.body.append(msg)\n    msg.classList.add('text-lg')\n\n    if (player.isComputer) {\n      msg.innerText = 'You win'\n      msg.classList.add('text-green-400')\n    } else {\n      msg.innerText = 'You lose'\n      msg.classList.add('text-red-400')\n    }\n  }\n\n  function receiveAttack() {\n    player.gameboard.receiveAttack(row, column)\n\n    el.classList.remove('bg-gray-100')\n    el.classList.remove('bg-violet-200')\n\n    el.classList.add('bg-red-300')\n\n    const shipSlot = player.gameboard.slots[row][column]\n    if (shipSlot.isSunk()) {\n      outlineSunken(player.isComputer ? 1 : 2)\n    }\n    if (player.gameboard.isAllSunk()) {\n      setTimeout(endGame, 800)\n    }\n  }\n\n  const outlineSunken = (gridN) => {\n    const slots = player.gameboard.slots\n    const ship = player.gameboard.slots[row][column]\n\n    for (const [i, slotRow] of slots.entries()) {\n      for (const [j, slot] of slotRow.entries()) {\n        if (slot === ship) {\n          const sunkenShip = document.querySelector(\n            `[data-grid${gridN}] [row=\"${i}\"][column=\"${j}\"]`,\n          )\n          sunkenShip.classList.replace('outline-slate-500', 'outline-red-500')\n          sunkenShip.classList.add('z-10')\n        }\n      }\n    }\n  }\n\n  return { ...cell, receiveAttack }\n}\n\nexport { GenericCell, EmptyCell, ShipCell }\n","import { GenericCell, EmptyCell, ShipCell } from './cell'\n\nconst Grid = (gridElement, player) => {\n  const setup = () => {\n    gridElement.innerHTML = ''\n\n    const slots = player.gameboard.slots\n    for (const [i, row] of slots.entries()) {\n      for (const [j] of row.entries()) {\n        const genericCell = GenericCell(player, j, i).get()\n        gridElement.append(genericCell)\n      }\n    }\n  }\n\n  const getCell = (row, column) => {\n    const slot = player.gameboard.slots[row][column]\n\n    if (slot.type === 'ship') {\n      const shipCell = ShipCell(player, column, row)\n\n      if (!player.isComputer) {\n        shipCell.get().classList.add('bg-violet-200')\n      }\n\n      return shipCell\n    }\n\n    if (slot.type === 'empty') {\n      return EmptyCell(player, column, row)\n    }\n  }\n\n  const start = () => {\n    gridElement.innerHTML = ''\n\n    const slots = player.gameboard.slots\n    for (const [i, row] of slots.entries()) {\n      for (const [j] of row.entries()) {\n        const cell = getCell(i, j)\n        cell.get().obj = cell\n        gridElement.append(cell.get())\n      }\n    }\n  }\n\n  return { setup, start }\n}\n\nexport default Grid\n","const Gameboard = () => {\n  const slots = createSlots()\n\n  function createSlots() {\n    const slots = []\n\n    for (let i = 0; i < 10; i++) {\n      slots[i] = []\n      for (let j = 0; j < 10; j++) {\n        slots[i][j] = { type: 'empty' }\n      }\n    }\n    return slots\n  }\n\n  const placeShipAt = (ship, x, y) => {\n    slots[x][y] = ship\n  }\n\n  const receiveAttack = (x, y) => {\n    const item = slots[x][y]\n\n    if (item.type === 'ship') {\n      item.hit()\n    } else if (item.type === 'empty') {\n      slots[x][y].type = 'missed'\n    }\n  }\n\n  const isAllSunk = () => {\n    let hasShips = false\n    for (const row of slots) {\n      for (const index of row) {\n        if (index.type === 'ship') {\n          hasShips = true\n          if (!index.isSunk()) {\n            return false\n          }\n        }\n      }\n    }\n\n    if (!hasShips) {\n      return false\n    }\n\n    return true\n  }\n\n  return { placeShipAt, receiveAttack, isAllSunk, slots }\n}\n\nexport default Gameboard\n","import Gameboard from './gameboard'\n\nconst Player = (isComputer, enemy) => {\n  const gameboard = Gameboard()\n\n  return { isComputer, enemy, gameboard }\n}\n\nexport default Player\n","const Ship = (size) => {\n  const type = 'ship'\n  let hits = 0\n\n  const hit = () => {\n    hits++\n  }\n\n  const isSunk = () => {\n    return hits >= size ? true : false\n  }\n\n  return { type, hit, isSunk, size }\n}\n\nexport default Ship\n","import Ship from './ship'\n\nconst RandomShipSlotN = ({ size: shipSize }) => {\n  let number\n  const boundLimit = 9\n\n  const shipIsWhithinBounds = () => {\n    if (number + (shipSize - 1) > boundLimit) return false\n\n    return true\n  }\n\n  const isValidN = () => {\n    if (shipIsWhithinBounds()) return true\n\n    return false\n  }\n\n  const randomizeUntilBound = () => {\n    number = Math.floor(Math.random() * (boundLimit + 1))\n  }\n\n  const get = () => {\n    do {\n      randomizeUntilBound()\n    } while (!isValidN())\n\n    return number\n  }\n\n  return { get }\n}\n\nconst ShipCoordinates = (ship, shipData) => {\n  const coordinates = []\n\n  const getAlignedCoordinates = (axisN, headN) => {\n    const alignedCoordinates = []\n    const orientation = getRandomOrientation()\n\n    for (let i = 0; i < ship.size; i++) {\n      if (orientation === 'row') {\n        alignedCoordinates.push([axisN, headN + i])\n      } else if (orientation === 'column') {\n        alignedCoordinates.push([headN + i, axisN])\n      }\n    }\n    return alignedCoordinates\n  }\n\n  const isSameAsShip = ([currentX, currentY], [shipX, shipY]) => {\n    if (currentX === shipX && currentY === shipY) {\n      return true\n    }\n    return false\n  }\n\n  const isAdjascentToShip = ([currentX, currentY], [shipX, shipY]) => {\n    if (\n      (currentX - 1 === shipX && currentY === shipY) ||\n      (currentX + 1 === shipX && currentY === shipY) ||\n      (currentX === shipX && currentY - 1 === shipY) ||\n      (currentX === shipX && currentY + 1 === shipY)\n    ) {\n      return true\n    }\n    return false\n  }\n\n  const isInvalidPosition = (currentCoordinates) => {\n    for (const ship of shipData) {\n      for (const shipCoordinate of ship.coordinate) {\n        for (const currentCoordinate of currentCoordinates) {\n          if (isSameAsShip(currentCoordinate, shipCoordinate)) {\n            return true\n          }\n          if (isAdjascentToShip(currentCoordinate, shipCoordinate)) {\n            return true\n          }\n        }\n      }\n    }\n    return false\n  }\n\n  const populateCoordinates = () => {\n    const axisN = RandomShipSlotN(ship).get()\n    const headN = RandomShipSlotN(ship).get()\n    const alignedCoordinates = getAlignedCoordinates(axisN, headN)\n\n    if (isInvalidPosition(alignedCoordinates)) {\n      populateCoordinates()\n    } else {\n      coordinates.push(...alignedCoordinates)\n    }\n  }\n\n  const getRandomOrientation = () => {\n    const randomBinaryValue = Math.floor(Math.random() * 2)\n    if (randomBinaryValue === 0) {\n      return 'row'\n    } else if (randomBinaryValue === 1) {\n      return 'column'\n    }\n  }\n\n  const get = () => {\n    populateCoordinates()\n    return coordinates\n  }\n\n  return { get }\n}\n\nconst RandomizeShips = (player, gridElement) => {\n  const shipData = []\n  const ships = [Ship(5), Ship(4), Ship(3), Ship(3), Ship(2)]\n\n  const shipPaint = ShipPaint(shipData, gridElement)\n\n  const clear = () => {\n    shipPaint.clear()\n    shipData.splice(0, shipData.length)\n  }\n\n  const generateData = () => {\n    for (const ship of ships) {\n      const data = {\n        ship,\n        coordinate: ShipCoordinates(ship, shipData).get(),\n      }\n      shipData.push(data)\n    }\n  }\n\n  const preview = () => {\n    clear()\n    generateData()\n    shipPaint.paint()\n  }\n\n  const place = () => {\n    for (const ship of shipData) {\n      for (const coordinate of ship.coordinate) {\n        player.gameboard.placeShipAt(ship.ship, coordinate[0], coordinate[1])\n      }\n    }\n  }\n  return { preview, place, generateData }\n}\n\nconst ShipPaint = (shipData, gridElement) => {\n  const paint = () => {\n    for (const ship of shipData) {\n      for (const coordinate of ship.coordinate) {\n        const cell = gridElement.querySelector(\n          `[row=\"${coordinate[0]}\"][column=\"${coordinate[1]}\"]`,\n        )\n        cell.classList.replace('bg-gray-100', 'bg-violet-200')\n      }\n    }\n  }\n\n  const clear = () => {\n    const cells = gridElement.children\n    for (const cell of cells) {\n      cell.classList.replace('bg-violet-200', 'bg-gray-100')\n    }\n  }\n\n  return { paint, clear }\n}\n\nexport { RandomizeShips }\n","import Grid from './grid'\nimport Player from './player'\nimport { RandomizeShips } from './randomize'\n\nconst gridElement1 = document.querySelector('[data-grid1]')\nconst gridElement2 = document.querySelector('[data-grid2]')\n\nconst player1 = Player(true)\nconst player2 = Player(false)\n\nplayer1.enemy = player2\nplayer2.enemy = player1\n\nconst grid1 = Grid(gridElement1, player1)\nconst grid2 = Grid(gridElement2, player2)\n\ngrid1.setup()\ngrid2.setup()\n\nconst randomShips1 = RandomizeShips(player1, gridElement1)\nconst randomShips2 = RandomizeShips(player2, gridElement2)\n\nrandomShips2.preview()\nconst randomizeButtom = document.querySelector('[data-randomize-buttom]')\nrandomizeButtom.addEventListener('click', () => {\n  randomShips2.preview()\n})\n\nconst startButtom = document.querySelector('[data-start-button]')\nstartButtom.addEventListener('click', () => {\n  randomShips2.place()\n\n  randomShips1.generateData()\n  randomShips1.place()\n\n  grid1.start()\n  grid2.start()\n\n  randomizeButtom.remove()\n  startButtom.remove()\n})\n"],"names":["attacked","GenericCell","player","column","row","el","document","createElement","className","setAttribute","newElement","addInteractiveEffects","boolean","effects","classList","add","remove","get","addInteractivity","cb","addEventListener","gameboard","isAllSunk","slots","grid","querySelector","isSlotCoordinate","slot","isValidCombination","wasAttacked","combination","recentShip","getRecentShip","reverse","type","recentShipSlot","isSunk","isShipAdjascent","shipSlot","attack","Math","floor","random","push","obj","receiveAttack","Computer","enemy","once","addAttackEvent","Grid","gridElement","getCell","shipCell","ShipCell","cell","isComputer","endGame","body","innerHTML","msg","append","innerText","outlineSunken","setTimeout","gridN","ship","i","slotRow","entries","j","sunkenShip","replace","EmptyCell","setup","genericCell","start","Gameboard","createSlots","placeShipAt","x","y","item","hit","hasShips","index","Player","size","hits","RandomShipSlotN","_ref","number","shipSize","ShipCoordinates","shipData","coordinates","isSameAsShip","_ref2","_ref3","currentX","currentY","shipX","shipY","isAdjascentToShip","_ref4","_ref5","populateCoordinates","alignedCoordinates","getAlignedCoordinates","axisN","headN","orientation","getRandomOrientation","currentCoordinates","shipCoordinate","coordinate","currentCoordinate","isInvalidPosition","randomBinaryValue","RandomizeShips","ships","Ship","shipPaint","ShipPaint","generateData","data","preview","clear","splice","length","paint","place","cells","children","gridElement1","gridElement2","player1","player2","grid1","grid2","randomShips1","randomShips2","randomizeButtom","startButtom"],"sourceRoot":""}